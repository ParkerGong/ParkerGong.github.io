# -*- coding: utf-8 -*-
"""
Fetch publications from Google Scholar and render publications.html / publications.json
Requires: scholarly, jinja2
"""

from scholarly import scholarly
from jinja2 import Template
import json, pathlib, sys, time

# >>> 把这里替换成你的 Scholar 用户 ID（个人页面 URL 里的 user=XXX 那段） <<<
USER_ID = "nAjSpe0AAAAJ"

OUT_JSON = pathlib.Path("publications.json")
OUT_HTML = pathlib.Path("publications.html")

TEMPLATE = Template(r"""<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Publications — Taiyuan (Parker) Gong</title>
<style>
:root{--fg:#0f172a;--muted:#64748b;--link:#2563eb;--border:#e2e8f0}
body{font:16px/1.65 system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji"; color:var(--fg); margin:24px auto; max-width:950px; padding:0 16px}
a{color:var(--link); text-decoration:none} a:hover{text-decoration:underline}
header{display:flex; align-items:center; gap:12px; margin:8px 0 12px}
.badge{font-size:12px; padding:2px 8px; border:1px solid var(--border); border-radius:999px; color:var(--muted)}
hr{border:none; border-top:1px solid var(--border); margin:18px 0}
.year{margin-top:18px; font-weight:700}
ol{margin:8px 0 0 20px} li{margin:10px 0}
.meta{color:var(--muted)}
.footer{color:var(--muted); font-size:14px; margin-top:28px}
</style>
</head>
<body>
<header>
  <a href="./">&larr; Home</a>
  <span class="badge">Auto-synced</span>
</header>

<h1>Publications</h1>
<p class="meta">Auto-generated from Google Scholar. Profile:
  <a href="https://scholar.google.com/citations?user={{ uid }}" target="_blank" rel="noopener">link</a>.
  Last updated: {{ updated }}.</p>
<hr>

{% if groups %}
  {% for y, items in groups %}
    <div class="year">{{ y }}</div>
    <ol>
    {% for p in items %}
      <li>
        <b>{{ p.title }}</b><br>
        <span class="meta">
          {{ p.authors }}. {{ p.venue }}{% if p.year %} ({{ p.year }}){% endif %}
          {% if p.url %} · <a href="{{ p.url }}">Link</a>{% endif %}
          {% if p.eprint %} · <a href="{{ p.eprint }}">PDF</a>{% endif %}
          · Cited by {{ p.cites }}
        </span>
      </li>
    {% endfor %}
    </ol>
  {% endfor %}
{% else %}
  <p><b>Loading from Google Scholar…</b> Please refresh later. (If this persists, check the GitHub Action logs.)</p>
{% endif %}

<p class="footer">&copy; {{ year }} Taiyuan (Parker) Gong · Generated by GitHub Actions</p>
</body></html>
""")

def fetch_pubs(uid: str):
    """Return a list of publications with essential fields."""
    author = scholarly.search_author_id(uid)
    author = scholarly.fill(author, sections=["publications"])
    pubs = []
    for p in author.get("publications", []):
        bib = p.get("bib", {})
        pubs.append({
            "title": bib.get("title", ""),
            "year": bib.get("pub_year") or bib.get("year"),
            "venue": bib.get("venue", ""),
            "authors": bib.get("author", ""),
            "cites": p.get("num_citations", 0) or 0,
            "eprint": bib.get("eprint") or "",
            "url": p.get("pub_url") or "",
        })
    # sort by year desc then citations desc
    pubs.sort(key=lambda x: ((int(x["year"]) if str(x["year"]).isdigit() else -1), x["cites"]), reverse=True)
    return pubs

def group_by_year(pubs):
    groups = {}
    for p in pubs:
        y = p["year"] if p["year"] else "In press"
        groups.setdefault(y, []).append(p)
    # keep item order within same year (already sorted above)
    return sorted(groups.items(), key=lambda kv: str(kv[0]), reverse=True)

def main():
    try:
        pubs = fetch_pubs(USER_ID)
    except Exception as e:
        # Fail gracefully: keep placeholder but write minimal json for debugging
        OUT_JSON.write_text(json.dumps({"error": str(e)}, ensure_ascii=False, indent=2))
        print("ERROR fetching Scholar:", e, file=sys.stderr)
        sys.exit(0)

    OUT_JSON.write_text(json.dumps(pubs, ensure_ascii=False, indent=2))

    html = TEMPLATE.render(
        uid=USER_ID,
        groups=group_by_year(pubs),
        updated=time.strftime("%Y-%m-%d %H:%M UTC", time.gmtime()),
        year=time.strftime("%Y"),
    )
    OUT_HTML.write_text(html, encoding="utf-8")
    print(f"Wrote {OUT_HTML} and {OUT_JSON} with {len(pubs)} items.")

if __name__ == "__main__":
    main()
